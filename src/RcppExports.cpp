// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ValueMatrixR
SEXP ValueMatrixR(const arma::colvec eval_times, const arma::colvec idx, const arma::colvec status, const arma::colvec time, const arma::colvec value);
RcppExport SEXP _AURMC_ValueMatrixR(SEXP eval_timesSEXP, SEXP idxSEXP, SEXP statusSEXP, SEXP timeSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec >::type eval_times(eval_timesSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type status(statusSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ValueMatrixR(eval_times, idx, status, time, value));
    return rcpp_result_gen;
END_RCPP
}
// KaplanMeierR
SEXP KaplanMeierR(const arma::colvec eval_times, const arma::colvec idx, const arma::colvec status, const arma::colvec time);
RcppExport SEXP _AURMC_KaplanMeierR(SEXP eval_timesSEXP, SEXP idxSEXP, SEXP statusSEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec >::type eval_times(eval_timesSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type status(statusSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(KaplanMeierR(eval_times, idx, status, time));
    return rcpp_result_gen;
END_RCPP
}
// EstimatorR
SEXP EstimatorR(const arma::colvec idx, const arma::colvec status, const arma::colvec time, const arma::colvec value, const Rcpp::Nullable<Rcpp::NumericVector> eval_times, const bool replace_na, const bool return_auc);
RcppExport SEXP _AURMC_EstimatorR(SEXP idxSEXP, SEXP statusSEXP, SEXP timeSEXP, SEXP valueSEXP, SEXP eval_timesSEXP, SEXP replace_naSEXP, SEXP return_aucSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type status(statusSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type value(valueSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericVector> >::type eval_times(eval_timesSEXP);
    Rcpp::traits::input_parameter< const bool >::type replace_na(replace_naSEXP);
    Rcpp::traits::input_parameter< const bool >::type return_auc(return_aucSEXP);
    rcpp_result_gen = Rcpp::wrap(EstimatorR(idx, status, time, value, eval_times, replace_na, return_auc));
    return rcpp_result_gen;
END_RCPP
}
// DrawBootstrapR
SEXP DrawBootstrapR(const arma::colvec idx, const arma::colvec status, const arma::colvec time, const arma::colvec value);
RcppExport SEXP _AURMC_DrawBootstrapR(SEXP idxSEXP, SEXP statusSEXP, SEXP timeSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type status(statusSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(DrawBootstrapR(idx, status, time, value));
    return rcpp_result_gen;
END_RCPP
}
// BootstrapSamplesR
SEXP BootstrapSamplesR(const int boot, const arma::colvec eval_times, const arma::colvec idx, const arma::colvec status, const arma::colvec time, const arma::colvec value, const bool return_auc);
RcppExport SEXP _AURMC_BootstrapSamplesR(SEXP bootSEXP, SEXP eval_timesSEXP, SEXP idxSEXP, SEXP statusSEXP, SEXP timeSEXP, SEXP valueSEXP, SEXP return_aucSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type boot(bootSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type eval_times(eval_timesSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type status(statusSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type value(valueSEXP);
    Rcpp::traits::input_parameter< const bool >::type return_auc(return_aucSEXP);
    rcpp_result_gen = Rcpp::wrap(BootstrapSamplesR(boot, eval_times, idx, status, time, value, return_auc));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_AURMC_ValueMatrixR", (DL_FUNC) &_AURMC_ValueMatrixR, 5},
    {"_AURMC_KaplanMeierR", (DL_FUNC) &_AURMC_KaplanMeierR, 4},
    {"_AURMC_EstimatorR", (DL_FUNC) &_AURMC_EstimatorR, 7},
    {"_AURMC_DrawBootstrapR", (DL_FUNC) &_AURMC_DrawBootstrapR, 4},
    {"_AURMC_BootstrapSamplesR", (DL_FUNC) &_AURMC_BootstrapSamplesR, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_AURMC(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
